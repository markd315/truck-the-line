/**
 * Truck The Line API
 * These are API docs for Truck The Line, a 48hours project led by Mark Davis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mark_davis@ultimatesoftware.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class PrintApiControllerApi {
    protected basePath = 'https://localhost:8080/truck';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Selects all Waiting For Print orders and returns a printable list of these, partitioned by vendor.
     * @summary Transitions from app to real-life.
     * @param vendor Filter the printjob to only a certain vendor
     */
    public dryRun (vendor?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Order> {
        const localVarPath = this.basePath + '/print';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (vendor !== undefined) {
            queryParameters['vendor'] = vendor;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Moves all Waiting For Print orders to Waiting for Truck and returns a printable list of these, partitioned by vendor.
     * @summary Transitions from app to real-life.
     * @param vendor Filter the printjob to only a certain vendor
     */
    public print (vendor?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Order> {
        const localVarPath = this.basePath + '/print';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (vendor !== undefined) {
            queryParameters['vendor'] = vendor;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
